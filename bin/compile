#!/usr/bin/env bash

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

CDN_HOST=$(cat "$ENV_DIR/CDN_HOST")
CDN_URL="https://$CDN_HOST/$SOURCE_VERSION"
MANIFEST_POLL_INTERVAL=10
HEROKU_BRANCH=$(cat "$ENV_DIR/HEROKU_BRANCH")
RAILS_ENV=$(cat "$ENV_DIR/RAILS_ENV" | sed 's/.*/\U&/')

echo
echo "--------------------------------------------------"
echo "Commit SHA        : $SOURCE_VERSION"
echo "CDN URL           : $CDN_URL"
echo "Heroku Branch     : $HEROKU_BRANCH"
echo "Rails Environment : $RAILS_ENV"
echo "--------------------------------------------------"
echo

# Webhook variables
HARNESS_WEBHOOK_BASE_URL=$(cat "$ENV_DIR/HARNESS_WEBHOOK_BASE_URL")
HARNESS_ACCOUNT_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_ACCOUNT_IDENTIFIER")
HARNESS_ORG_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_ORG_IDENTIFIER")
HARNESS_PROJECT_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_PROJECT_IDENTIFIER")
HARNESS_PIPELINE_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_PIPELINE_IDENTIFIER")
HARNESS_TRIGGER_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_TRIGGER_IDENTIFIER")
HARNESS_WEBHOOK_PAYLOAD="{\"commitSha\": \"$SOURCE_VERSION\", \"branch\": \"$HEROKU_BRANCH\", \"env\": \"$RAILS_ENV\"}"

# Construct URL
WEBHOOK_URL="${HARNESS_WEBHOOK_BASE_URL}?accountIdentifier=${HARNESS_ACCOUNT_IDENTIFIER}&orgIdentifier=${HARNESS_ORG_IDENTIFIER}&projectIdentifier=${HARNESS_PROJECT_IDENTIFIER}&pipelineIdentifier=${HARNESS_PIPELINE_IDENTIFIER}&triggerIdentifier=${HARNESS_TRIGGER_IDENTIFIER}"

download_manifest_archive() {
  echo "Attempting to download $CDN_URL/manifests.tar.gz"
  curl -f -s -o manifests.tar.gz "$CDN_URL/manifests.tar.gz"
}

check_manifest_loop() {
  while true; do
    if download_manifest_archive; then
      echo "✅ Manifest archive downloaded successfully."
      break
    else
      # echo "    Retrying in $MANIFEST_POLL_INTERVAL seconds..."
      sleep $MANIFEST_POLL_INTERVAL
    fi
  done
}

trigger_webhook() {
  response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
    -H 'Content-Type: application/json' \
    --url "$WEBHOOK_URL" \
    -d "$HARNESS_WEBHOOK_PAYLOAD")

  if [ "$response" -eq 200 ]; then
    echo "✅ Webhook triggered successfully."
  else
    echo "❌ Failed to trigger webhook. HTTP status code: $response"
  fi
}

if download_manifest_archive; then
  echo "---> ✅ Success! Skipping build!"
else
  echo "---> ⏭️ Failed! Triggering new build..."
  trigger_webhook
  echo "---> ⏳ Frontend is being built in Harness. This could take a while..."
  sleep 180
  echo "---> ⏳ Downloading manifest archive. This could take a while..."
  check_manifest_loop
fi

echo "---> Extracting manifest archive..."

mkdir -p public
tar -xvf manifests.tar.gz -C $BUILD_DIR/public
rm -f manifests.tar.gz

# Delete package.json and yarn.lock files, so the ruby buildpack coming next
# does not attempt to install node
# https://devcenter.heroku.com/articles/ruby-support-reference#node-js-support
rm -f $BUILD_DIR/package.json $BUILD_DIR/yarn.lock

# Write the commit SHA to a HEROKU_BUILD_COMMIT file, to support review apps that are
# recently-created and lack the heroku labs features that provide this information
echo $SOURCE_VERSION > $BUILD_DIR/HEROKU_BUILD_COMMIT