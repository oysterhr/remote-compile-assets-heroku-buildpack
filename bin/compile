#!/usr/bin/env bash

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

# Max number of minutes we'll wait for the remote build to finish.
REMOTE_BUILD_TIMEOUT_MINUTES=$(cat "$ENV_DIR/REMOTE_BUILD_TIMEOUT_MINUTES")

CDN_HOST=$(cat "$ENV_DIR/CDN_HOST")
CDN_URL="https://$CDN_HOST/$SOURCE_VERSION"
POLL_INTERVAL=10
HEROKU_BRANCH=$(cat "$ENV_DIR/HEROKU_BRANCH")
RAILS_ENV=$(cat "$ENV_DIR/RAILS_ENV" | tr '[:lower:]' '[:upper:]')

echo
echo "--------------------------------------------------"
echo "Commit SHA        : $SOURCE_VERSION"
echo "CDN URL           : $CDN_URL"
echo "Heroku Branch     : $HEROKU_BRANCH"
echo "Rails Environment : $RAILS_ENV"
echo "--------------------------------------------------"
echo

# Webhook variables
HARNESS_WEBHOOK_BASE_URL=$(cat "$ENV_DIR/HARNESS_WEBHOOK_BASE_URL")
HARNESS_ACCOUNT_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_ACCOUNT_IDENTIFIER")
HARNESS_ORG_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_ORG_IDENTIFIER")
HARNESS_PROJECT_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_PROJECT_IDENTIFIER")
HARNESS_PIPELINE_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_PIPELINE_IDENTIFIER")
HARNESS_TRIGGER_IDENTIFIER=$(cat "$ENV_DIR/HARNESS_TRIGGER_IDENTIFIER")
HARNESS_WEBHOOK_PAYLOAD="{\"commitSha\": \"$SOURCE_VERSION\", \"branch\": \"$HEROKU_BRANCH\", \"env\": \"$RAILS_ENV\"}"

# Construct URL
WEBHOOK_URL="${HARNESS_WEBHOOK_BASE_URL}?accountIdentifier=${HARNESS_ACCOUNT_IDENTIFIER}&orgIdentifier=${HARNESS_ORG_IDENTIFIER}&projectIdentifier=${HARNESS_PROJECT_IDENTIFIER}&pipelineIdentifier=${HARNESS_PIPELINE_IDENTIFIER}&triggerIdentifier=${HARNESS_TRIGGER_IDENTIFIER}"

start_timer() {
  TIMEOUT_MINUTES=$1
  TIMEOUT=$((TIMEOUT_MINUTES * 60)) # Convert minutes to seconds
  START_TIME=$(date +%s)
}

check_timeout() {
  CURRENT_TIME=$(date +%s)
  ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
  if [ "$ELAPSED_TIME" -ge "$TIMEOUT" ]; then
    echo "-----> ❌ Timeout of $TIMEOUT_MINUTES minute(s) reached. Aborting."
    exit 1
  fi
}

check_file_exists_remote() {
  echo "-----> ⏳ Checking if file exists at $CDN_URL/$1"
  # Use curl to send a HEAD request to check if the file exists
  if curl -f -s -I "$CDN_URL/$1" > /dev/null; then
    return 0
  else
    return 1
  fi
}

download_manifest_archive() {
  echo "-----> ⏳ Attempting to download $CDN_URL/manifests.tar.gz"
  curl -f -s -o manifests.tar.gz "$CDN_URL/manifests.tar.gz"
}

check_manifest_loop() {
  start_timer $REMOTE_BUILD_TIMEOUT_MINUTES

  while true; do
    if download_manifest_archive; then
      echo "✅ Manifest archive downloaded successfully."
      break
    else
      check_timeout
      echo "-----> ⏳ Retrying in $POLL_INTERVAL seconds..."      
      sleep $POLL_INTERVAL
    fi
  done
}

trigger_webhook() {
  response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
    -H 'Content-Type: application/json' \
    --url "$WEBHOOK_URL" \
    -d "$HARNESS_WEBHOOK_PAYLOAD")

  if [ "$response" -eq 200 ]; then
    echo "-----> ✅ Webhook triggered successfully."
  else
    echo "-----> ❌ Failed to trigger webhook. HTTP status code: $response"
  fi
}

if [[ $CURRENT_BUILDPACK_STEP == "download_manifest" ]]; then
  echo "-----> 🔄 Running step 2: Downloading manifest archive..."

  if download_manifest_archive; then
    echo "-----> ✅ Manifest archive downloaded successfully. Extracting..."
  else
    echo "-----> ⏳ Manifest archive not found. Entering busy loop until it can be downloaded..."
    check_manifest_loop
  fi

  mkdir -p public
  tar -xvf manifests.tar.gz -C "$BUILD_DIR/public"
  rm -f manifests.tar.gz

  echo "-----> ⏳ We'll now check whether the file finished.txt is found in the remote, indicating all compiled assets have been uploaded."

  while true; do
    if check_file_exists_remote "finished.txt"; then
      echo "-----> ✅ File finished.txt has been found. All done!"
      break
    else
      echo "-----> ⏳ File finished.txt not found. Retrying in $POLL_INTERVAL seconds..."
      check_timeout
      sleep "$POLL_INTERVAL"
    fi
  done
else
  echo "-----> 🔄 Running step 1: Triggering webhook to compile frontend assets and manifest archive, if it is not present in remote..."

  # Next time this buildpack runs, it will download the manifest archive
  echo "export CURRENT_BUILDPACK_STEP=download_manifest" > "$BUILDPACK_DIR/export"

  # Check if the manifest archive exists, and trigger a new build if not
  # IF it already exists, we just proceed, as the buildpack will download it later
  # once it runs for the second time.
  if check_file_exists_remote "manifests.tar.gz"; then
    echo "-----> ✅ Manifest archive found!"
  else
    echo "-----> ⏳ Manifest archive not found. Triggering a new build..."
    trigger_webhook
  fi

  echo "-----> ✅ Create a bogus manifest.yml file so the ruby buildpack does not call assets:precompile."
  mkdir -p "$BUILD_DIR/public/assets"
  touch "bogus" > "$BUILD_DIR/public/assets/manifest-123.json"
  
  # Delete package.json and yarn.lock files, so the ruby buildpack coming next
  # does not attempt to install node
  # https://devcenter.heroku.com/articles/ruby-support-reference#node-js-support
  rm -f "$BUILD_DIR/package.json" "$BUILD_DIR/yarn.lock"

  echo "-----> ✅ Removed package.json and yarn.lock, to prevent the ruby buildpack coming next from installing node."

  # Write the commit SHA to a HEROKU_BUILD_COMMIT file, to support review apps that are
  # recently-created and lack the heroku labs features that provide this information
  echo $SOURCE_VERSION > "$BUILD_DIR/HEROKU_BUILD_COMMIT"

  echo "-----> ✅ Commit SHA ($SOURCE_VERSION) wrote to HEROKU_BUILD_COMMIT to support freshly created review apps without labs features."

  echo "-----> ✅ Step 1 finished, allowing other buildpacks to run."
fi